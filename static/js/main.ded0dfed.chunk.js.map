{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","hm","event","z","target","value","setState","h","hn","w","y","state","bm","val","bmi","hand","AppBar","variant","color","style","background","Container","fixed","position","border","paddingTop","paddingLeft","paddingRight","width","this","TextField","label","type","max","onChange","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSA+DeA,G,wDAxDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQNC,GAAG,SAACC,GAEF,IAAIC,EAAED,EAAME,OAAOC,MACnB,EAAKC,SAAS,CAACC,EAAEJ,KAZF,EAcjBK,GAAG,SAACN,GAEF,IAAIC,EAAED,EAAME,OAAOC,MACnB,EAAKC,SAAS,CAACG,EAAEN,IAChB,IAAIO,EAAE,EAAKC,MAAMJ,EAAE,IACfK,EAAGT,GAAGO,EAAEA,GACZE,EAAG,KACD,EAAKN,SAAS,CAACO,IAAI,gBAEhBD,GAAI,MAAQA,GAAI,KAEtB,EAAKN,SAAS,CAACO,IAAI,iBAEbD,GAAI,IAAMA,GAAI,KAAM,EAAKN,SAAS,CAACO,IAAI,eACvCD,GAAI,IAAI,EAAKN,SAAS,CAACO,IAAI,UAC/B,EAAKP,SAAS,CAACQ,IAAIF,KA7BN,EAgCjBG,KAAK,WAEH,EAAKT,SAAS,CAACQ,IAAI,EAAEP,EAAE,EAAEE,EAAE,KAhC7B,EAAKE,MAAQ,CACdJ,EAAE,EACFE,EAAE,EACLK,IAAI,EACJD,IAAI,IANiB,E,qDAqCnB,OACE,6BACA,kBAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,MAAO,CACzDC,WAAW,qDAAqD,+CAAgC,6BAC5F,6BACJ,6BAAK,6BACL,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACH,MAAO,CAACC,WAAW,mDAAoDG,SAAS,WAAWC,OAAO,QAAQC,WAAW,OAAOC,YAAY,OAAOC,aAAa,QAAQC,MAAM,UACvL,qCAAWC,KAAKlB,MAAMG,KAAQ,6BAAK,6BACnC,2BAAIe,KAAKlB,MAAME,KACf,6BAAK,6BAAK,kBAACiB,EAAA,EAAD,CAAWC,MAAM,iBAAkBd,QAAQ,WAAWe,KAAK,SAASC,IAAI,MAAM5B,MAAOwB,KAAKlB,MAAMJ,EAAG2B,SAAUL,KAAK5B,KAC5H,6BAAK,6BACL,kBAAC6B,EAAA,EAAD,CAAWC,MAAM,iBAAkBd,QAAQ,WAAWe,KAAK,SAASC,IAAI,MAAM5B,MAAOwB,KAAKlB,MAAMF,EAAGyB,SAAUL,KAAKrB,KACpH,6BAAK,6BANP,IAMa,kBAAC2B,EAAA,EAAD,CAAQC,QAASP,KAAKd,KAAME,QAAQ,YAAYC,MAAM,WAAtD,SACG,6BAAK,mC,GAnDHmB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ded0dfed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n   h:0,\n   w:0,\nbmi:0,\nval:\"\",\n    }\n    }\n    hm=(event)=>\n    {\n      var z=event.target.value;\n      this.setState({h:z});\n    }\n    hn=(event)=>\n    {\n      var z=event.target.value;\n      this.setState({w:z});\n       var y=this.state.h/100;\n       var bm=z/(y*y);\n    if(bm<18.5)\n        {this.setState({val:\"underWeight\"});\n    }\n    else if(bm>=18.5 && bm<=24.9)\n    {\n      this.setState({val:\"NormalWeight\"});\n    }\n    else if(bm>=25 && bm<=29.9){this.setState({val:\"OverWeight\"});}\n    else if(bm>=30){this.setState({val:\"Obese\"});}\n        this.setState({bmi:bm});\n    }\n\n    hand=()=>\n    {\n      this.setState({bmi:0,h:0,w:0});\n    }\n  render() {\n  return (\n    <div>\n    <AppBar variant=\"contained\" color=\"secondary\" style={{\nbackground:\"linear-gradient(45deg, #06beb6 60%, #48b1bf 70%)\"}}><h2>BMI CALCULATOR</h2></AppBar><br/>\n    <br/>\n<br/><br/>\n<Container fixed style={{background:\"linear-gradient(45deg, #06beb6 60%, #48b1bf 70%)\" ,position:\"absolute\",border:\"solid\",paddingTop:\"50px\",paddingLeft:\"50px\",paddingRight:\"100px\",width:\"320px\"}}>\n    <p>BMI is {this.state.bmi}</p><br/><br/>\n    <p>{this.state.val}</p>\n    <br/><br/><TextField label=\"Height(in Cms)\"  variant=\"outlined\" type=\"number\" max=\"250\" value={this.state.h} onChange={this.hm}></TextField>\n    <br/><br/>\n    <TextField label=\"Weight(in Kgs)\"  variant=\"outlined\" type=\"number\" max=\"400\" value={this.state.w} onChange={this.hn}></TextField>\n  <br/><br/> <Button onClick={this.hand} variant=\"contained\" color=\"primary\" >\n  Reset</Button><br/><br/></Container>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}